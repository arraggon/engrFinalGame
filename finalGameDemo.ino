#include <Adafruit_CircuitPlayground.h>
#include <Wire.h>
#include <SPI.h>

const uint8_t spGAMES[]             PROGMEM ={0xAA,0x15,0x24,0x2A,0xD6,0xE4,0xB6,0xB6,0x79,0x13,0xB1,0x5C,0xB2,0xF3,0x93,0x97,0xA4,0x66,0x3E,0x75,0x77,0x3E,0xF2,0x52,0x8D,0xCD,0x26,0xF6,0xCC,0x7B,0xDE,0x8A,0x9A,0x14,0x2D,0xBA,0xD2,0xAC,0x66,0xDD,0xEB,0xDE,0x8E,0xB6,0x7A,0x47,0x0D,0xAF,0x95,0x3A,0x6D,0xB1,0x9A,0xDA,0x8E,0xED,0x6C,0x67,0x3A,0x6E,0xA5,0x46,0x42,0xB1,0xED,0x74,0x27,0x3A,0x62,0x32,0xC2,0x23,0x76,0xEA,0x7F,0x22,0x36,0x11,0xF5,0x06,0x38,0x1C,0xC8,0x00,0xDF,0x29,0x39,0xE0,0x7B,0x56,0x03,0x7C,0xCD,0xCA,0x80,0xCC,0x83,0x1E,0x00,0x00};
const uint8_t spOVER[]              PROGMEM ={0xA7,0xD0,0xAE,0x2F,0x50,0xBA,0x9D,0x5C,0xDB,0xFA,0x24,0xCE,0x3A,0x72,0x19,0xFA,0x15,0x25,0x73,0xCB,0x45,0xAE,0x67,0xB4,0x2E,0xAD,0x10,0xB1,0x4E,0xC1,0x3D,0xB7,0x3A,0x1A,0x57,0x95,0x70,0xD4,0x9A,0x6C,0x4C,0x85,0xCD,0x4D,0xAF,0x5A,0xA5,0x7D,0x9A,0x9B,0xBB,0x1B,0x8D,0x69,0x66,0xE9,0xDC,0xAD,0xB5,0xA6,0x84,0xD8,0xA8,0xB6,0xD4,0xE9,0x2E,0x56,0x23,0x7E,0x42,0xAF,0xBB,0xC8,0x94,0x78,0x76,0xBD,0x99,0x2C,0x59,0xEC,0xCB,0xF5,0xB2,0x98,0x64,0xA6,0xE4,0x07,0x00,0x00};
const uint8_t spYOU[]               PROGMEM ={0xA5,0xDA,0x0D,0x98,0x23,0x6F,0xF4,0x6A,0x55,0x33,0xA9,0x82,0xC6,0xEB,0x91,0xF5,0x68,0x02,0x11,0x5B,0x67,0x36,0x32,0x2B,0xA2,0x24,0x75,0x75,0xCF,0x7B,0xD5,0x9B,0xD6,0x5A,0x61,0xE5,0x49,0xDD,0x6A,0x97,0xFB,0xD8,0xFB,0x5E,0x77,0xA2,0xB3,0x2C,0x45,0x25,0x8D,0x3C,0x00,0x00};
const uint8_t spGOT[]               PROGMEM ={0xA2,0x20,0xBA,0x2A,0xDD,0x13,0x8F,0x2A,0x07,0x13,0x2D,0x5D,0x7B,0xF3,0x93,0xFB,0x6C,0xE1,0x11,0x73,0x4F,0xE1,0x73,0xB6,0x6B,0xD4,0xBF,0xC5,0xAD,0x66,0x5D,0x3A,0xEF,0x5A,0x4A,0xC2,0x52,0xEE,0x75,0x0F,0x20,0x00,0x43,0xC2,0x19,0x30,0x44,0x04,0x3C};
const uint8_t spONE[]               PROGMEM ={0xA6,0xA5,0x36,0xDF,0x89,0xEC,0xA5,0x86,0xDB,0xF9,0x42,0x56,0x9A,0x2A,0xE1,0xFB,0x0B,0x38,0x7D,0x6F,0x46,0x63,0x7C,0x9D,0x62,0x25,0x9E,0xCD,0x28,0x5C,0xAC,0x32,0xEA,0x38,0xBB,0x1A,0x4D,0x88,0x56,0x2A,0x53,0x67,0x76,0x79,0x70,0x83,0xF3,0x94,0x6C,0xE9,0xD6,0x0C,0xCE,0x61,0x8A,0xB4,0x3B,0x36,0xCA,0x20,0x1A,0xDC,0xAD,0xCD,0x28,0x8D,0x78,0x7B,0x5B,0x26,0x93,0x10,0x6A,0x95,0x9E,0xDA,0x4C,0x25,0x85,0x9A,0x5A,0x9A,0x07};
const uint8_t spTHREE[]             PROGMEM ={0x0C,0x08,0xCA,0x44,0x02,0x1A,0xB0,0x40,0xC8,0x4D,0x15,0x73,0xCB,0xB4,0x39,0x0F,0xB9,0xE9,0x14,0xE6,0xAD,0xBE,0xE4,0x7E,0x50,0x50,0xA9,0xDF,0x91,0xE5,0x25,0x05,0x21,0x79,0x47,0x5E,0x7A,0x18,0x09,0xBD,0x5F,0x45,0xCB,0xC1,0xA8,0xF6,0x76,0x56,0xAD,0x2D,0x41,0x98,0xB3,0xEF,0xD4,0x2E,0x0C,0x5E,0x89,0xE5,0x66,0x65,0x3F,0xB8,0xC1,0x6B,0xF2,0x9A,0x0E,0x63,0x46,0xAF,0x38,0xAB,0x53,0xCC,0x03};
const uint8_t spFOUR[]              PROGMEM ={0xC0,0x00,0x23,0x2D,0x24,0xA0,0x01,0x0B,0x58,0x20,0xC5,0xBC,0xF7,0x11,0x4C,0x9A,0x9A,0xA4,0x84,0xF6,0x39,0x85,0x6E,0x97,0x93,0x98,0x84,0x8C,0xF5,0x5E,0x45,0xCD,0xDE,0x2A,0x91,0x63,0xD2,0x58,0x7D,0x6B,0x55,0xB1,0xF2,0x26,0xED,0xA9,0xE7,0xDB,0xC2,0x4B,0xFC,0xBA,0x49,0x2E,0x89,0x55,0xF4,0xE3,0x66,0xB5,0x95,0xAB,0xCC,0xBB,0x9B,0xED,0x30,0xF6,0x11,0x35,0x76,0x7B,0x00,0x00};
const uint8_t spFIVE[]              PROGMEM ={0xC0,0x80,0xE8,0xCD,0x46,0xEE,0x9C,0x6F,0x31,0x66,0x39,0xB9,0xF3,0x35,0x45,0xD6,0xF4,0x64,0xDE,0x77,0x27,0x79,0xDD,0x93,0x7A,0xDF,0x1D,0x14,0x45,0x4E,0xE6,0x43,0x97,0x73,0x05,0x3D,0x45,0x08,0x5D,0xC5,0x15,0xE5,0x54,0x21,0x56,0x06,0x67,0x90,0x53,0xC7,0x54,0x15,0x14,0x75,0x4F,0x1B,0xAB,0x17,0x43,0x25,0x59,0x5D,0x6C,0x5E,0xAA,0x59,0x75,0xF4,0xA9,0x59,0x69,0xD5,0xD4,0xD1,0xC7,0x6A,0xA1,0x5E,0x53,0xDB,0x10,0x8B,0x86,0x46,0x5D,0x6D,0x43,0x28,0x1A,0x1A,0x35,0xB4,0xF4,0x2E,0x4B,0xA9,0x75,0x62,0x33,0x98,0xA2,0xC6,0x5A,0x09,0xD9,0x20,0x95,0x7B,0x99,0xBB,0x06,0x04,0x38,0x27,0x84,0x00,0xE5,0xD5,0x1F};
const uint8_t spSIX[]               PROGMEM ={0x06,0x98,0xB6,0xC4,0x01,0x2F,0x66,0x46,0x20,0x01,0xD3,0x96,0x18,0x40,0x04,0xAF,0x96,0xA4,0x60,0xA1,0x52,0x8B,0x6F,0xB2,0x92,0x58,0xC4,0xC5,0x67,0xC9,0x4E,0x46,0x95,0x9A,0xB8,0x44,0x2D,0x76,0x7D,0x48,0xD8,0x13,0x15,0x03,0x00,0x10,0x60,0xA2,0x8B,0x00,0x8E,0xAD,0x52,0xC0,0xCF,0x9E,0x1A,0x10,0xC0,0x8F,0xE6,0x0F,0x00,0x00};
const uint8_t spSEVEN[]             PROGMEM ={0x0C,0xF8,0xDE,0x4C,0x02,0x1A,0xD0,0x80,0x05,0x2C,0xB0,0x62,0x17,0x2D,0x43,0x2B,0xF1,0x4D,0x6E,0xB2,0xD3,0x92,0x19,0x1F,0x6E,0xEC,0x51,0x5C,0xE5,0xB9,0x5A,0x58,0x3A,0x76,0x95,0xF7,0x9E,0x1E,0x30,0xAF,0x77,0x65,0xB2,0x29,0x42,0x2C,0xA6,0xB8,0xD9,0x64,0xCD,0x90,0x8A,0xE5,0x66,0x13,0x38,0x8C,0xD3,0x9D,0x58,0xB4,0x17,0x1B,0x29,0xF7,0x62,0x31,0x5E,0xC5,0x24,0xD3,0x88,0xCD,0x79,0xD6,0x90,0x71,0xF7};
const uint8_t spEIGHT[]             PROGMEM ={0x2D,0x2F,0xC5,0x54,0xA3,0x63,0xB5,0xBC,0x54,0x55,0xCD,0x1E,0x32,0xB2,0x5A,0x85,0xB8,0xBA,0xCE,0xCE,0x66,0x36,0x8B,0x56,0xD5,0x22,0xC8,0x55,0x73,0x63,0x2F,0x07,0x00,0x00,0x02,0x44,0x6D,0xCA,0x01,0x04,0x18,0x21,0x86,0x81,0x07};
const uint8_t spNINE[]              PROGMEM ={0x80,0x52,0xAA,0x32,0x2B,0xDA,0xB6,0xA9,0xAC,0x95,0x69,0xCD,0x48,0xAE,0xB1,0x5E,0xC7,0xAD,0x4D,0xAE,0x3A,0xBA,0x0C,0x51,0xAA,0x72,0xAA,0xE0,0x3B,0x25,0xB0,0xCD,0xA9,0x6C,0x9C,0x34,0xCD,0x2A,0x2B,0x77,0x61,0xD2,0x2C,0xEB,0x8C,0xDC,0xFB,0x49,0xD2,0x29,0x32,0x0A,0x17,0xC7,0xCD,0x22,0xEA,0xA9,0x62,0xA8,0x70,0xC9,0x7A,0xA7,0x4D,0x39,0x33,0x58,0x9B,0x8E,0x2E,0x76,0x0D,0xD5,0xA8,0xD3,0xFA,0xD0,0x43,0xB4,0x35,0x76,0x19,0x52,0x96,0xD0,0xCC,0xC8,0x65,0x88,0x43,0x45,0x23,0xAA,0xBA,0x31,0x0C,0x23,0xCD,0x18,0xC3,0x46,0x19,0x25,0x52,0xB3,0xA6,0x1A,0xB4,0xE3,0x48,0xA9,0x88,0x66,0x14,0x56,0x3D,0x22,0x1B,0x86,0xD1,0x29,0x37,0xCA,0x8C,0x0B,0x00,0xF0};
const uint8_t spZERO[]              PROGMEM ={0xAD,0x59,0x3A,0xC8,0x18,0xFD,0x9E,0xA2,0x99,0x34,0x23,0xE9,0x77,0xB2,0xE0,0xDD,0xC4,0xAA,0xCD,0x49,0x5C,0x36,0xB3,0xAC,0x36,0x2B,0xB1,0x45,0xD2,0x33,0x72,0xEF,0x6C,0x54,0xA6,0x73,0x79,0x49,0xDE,0xD5,0xD8,0x2A,0xE9,0xA9,0xDE,0x67,0xEF,0x06,0x99,0xBB,0xA4,0x2D,0x75,0x19,0x54,0xB4,0x2F,0xD1,0xB4,0x79,0xF0,0x83,0x1F,0xFC,0xEC,0x17,0xBB,0x3C,0x00,0x00};
const uint8_t spGOODBYE[]           PROGMEM ={0xA9,0x49,0xE1,0x54,0x91,0x2D,0xAF,0x22,0x07,0x55,0x29,0x69,0x7B,0xF2,0x18,0x38,0x32,0x3C,0xCB,0x4D,0x52,0xC8,0x4A,0x5A,0x65,0x99,0x52,0x21,0x6A,0x61,0x69,0x2E,0x45,0x46,0x2C,0x43,0xA9,0x3C,0x3D,0x1C,0x87,0x2A,0x3A,0xFB,0x50,0x6E,0x73,0xEB,0xDB,0xEC,0x6E,0x77,0xA3,0xF7,0xD1,0x4E,0x35,0xA2,0xCC,0x7E,0x74,0x3E,0xC6,0xA8,0x79,0x85,0xD1,0x86,0x64,0x65,0x16,0x95,0x5B,0x13,0x52,0xB0,0x65,0x94,0x2E,0xB5,0x4D,0x6A,0x55,0x65,0xF8,0x01,0x00,0x00};


int count = 1;

int score = 0;

int holding = 500;
int loading = 100;
int timer = 10;
int level = 0;



bool leftButtonPressed;
bool rightButtonPressed;

bool slideSwitch = CircuitPlayground.slideSwitch();

void setup() {
  Serial.begin(9600);
  CircuitPlayground.begin();
}

void loop() {
  int lightMode;
  int lightTime;
  int lightTimeR;
  int lightTimeL;

  int longerTime;



  bool slideSwitch = CircuitPlayground.slideSwitch();

  CircuitPlayground.clearPixels();
  CircuitPlayground.redLED(LOW);

    

  if (slideSwitch) {

    if (count == 1) {

    int lightMode = random(1,5);//asndjajsdjfasdfjasjdfjawjsdf
    int lightTime = random(1,6);
    int lightTimeR = random(1,6);
    int lightTimeL = random(1,6);

    if (lightTimeR > lightTimeL) {
      longerTime = lightTimeR;
    } else if (lightTimeR <= lightTimeL) {
      longerTime = lightTimeL;
    }

      Serial.print("longer Time is ");
      Serial.println(longerTime);

    switch (lightMode) {
      case 1: 

      Serial.print("lightMode is ");
      Serial.println(lightMode);

      Serial.print("lightTime is ");
      Serial.println(lightTime);

      

      for (int i=0; i<lightTime; i++) {
        CircuitPlayground.setPixelColor(i, 255,   0,   0);
        delay(loading);
      }
      break;

      case 2:
      Serial.print("lightMode is ");
      Serial.println(lightMode);

      Serial.print("lightTimeR is ");
      Serial.println(lightTime);

      

      for (int i=0; i<lightTime; i++) {
        int ll = map(i, 0, 4, 9, 5);
        CircuitPlayground.setPixelColor(ll, 255,   0,   0);
        delay(loading);
      }
      break;

      case 3:
      Serial.print("lightMode is ");
      Serial.println(lightMode);

      Serial.print("lightTimeR is ");
      Serial.println(lightTimeR);

      Serial.print("lightTimeL is ");
      Serial.println(lightTimeL);

      

      for (int i=0; i<lightTimeR || i<lightTimeL; i++) {
        if (i<lightTimeR) {
          CircuitPlayground.setPixelColor(i, 255,   0,   0);
          delay(loading);
        }
        if(i<lightTimeL) {
          CircuitPlayground.setPixelColor(9-i, 255,   0,   0);
          delay(loading);
        }
      }
      break;

      case 4:
      Serial.print("lightMode is ");
      Serial.println(lightMode);

      CircuitPlayground.setPixelColor(0, 255,   0,   0);
      CircuitPlayground.setPixelColor(1, 255,   0,   0);
      CircuitPlayground.setPixelColor(2, 255,   0,   0);
      CircuitPlayground.setPixelColor(3, 255,   0,   0);
      CircuitPlayground.setPixelColor(4, 255,   0,   0);
      CircuitPlayground.setPixelColor(5, 255,   0,   0);
      CircuitPlayground.setPixelColor(6, 255,   0,   0);
      CircuitPlayground.setPixelColor(7, 255,   0,   0);
      CircuitPlayground.setPixelColor(8, 255,   0,   0);
      CircuitPlayground.setPixelColor(9, 255,   0,   0);

      CircuitPlayground.redLED(HIGH);
      break;
    }


    //-------------------------------------------- input part --------------------------------------------

    int right = 0;
    int left = 0;

    int step = 0;

    while (lightMode == 1){
      //M1111111111111111111111111111
      step++;
      
      leftButtonPressed = CircuitPlayground.rightButton();
      rightButtonPressed = CircuitPlayground.leftButton();
      if (right < lightTime && rightButtonPressed) {
        CircuitPlayground.setPixelColor(right, 0,   255,   0);
        right++;
        score++;
        Serial.println(right);
        delay(holding);
      } else if (leftButtonPressed || (step*timer) > ((lightTime*holding)*1.5)) {
        count = 0;
        break;
      } else if (right>=lightTime) {
        passTone();
        break;
      }
      delay(timer);
    }

    while (lightMode == 2){//M22222222222222222222222
      
      step++;

      leftButtonPressed = CircuitPlayground.rightButton();
      rightButtonPressed = CircuitPlayground.leftButton();
      if (left < lightTime && leftButtonPressed) {
        CircuitPlayground.setPixelColor(9-left, 0,   255,   0);
        left++;
        score++;
        Serial.println(left);
        delay(holding);
      } else if (rightButtonPressed || (step*timer) > ((lightTime*holding)*1.5)) {
        count = 0;
        break;
      } else if (left>=lightTime) {
        passTone();
        break;
      }
      delay(timer);
    }    
    
    while (lightMode == 3) {
      
      step++;

      leftButtonPressed = CircuitPlayground.rightButton();
      rightButtonPressed = CircuitPlayground.leftButton();

      if ((right < lightTimeR) && rightButtonPressed) {
        CircuitPlayground.setPixelColor(right, 0,   255,   0);
        delay(holding);
        right++;
        score++;
        Serial.println(right);
      } else if (right>=lightTimeR) {

      }

      if (left < lightTimeL && leftButtonPressed) {
        CircuitPlayground.setPixelColor(9-left, 0,   255,   0);
        delay(holding);
        left++;
        score++;
        Serial.println(left);
      } else if (left>=lightTimeL) {

      }

      

      if ((step*timer) > (longerTime*holding)*1.5) {
        count = 0;
        break;
      }

      if (right>=lightTimeR && left>=lightTimeL) {
        passTone();
        break;
      }
      delay(timer);
    }

    while (lightMode == 4) {

      step++;
      
      leftButtonPressed = CircuitPlayground.rightButton();
      rightButtonPressed = CircuitPlayground.leftButton();

      int lightLevel = CircuitPlayground.lightSensor();

      
      if (leftButtonPressed || rightButtonPressed){
        count = 0;
        break;
      }

      if (lightLevel < 200) {
      CircuitPlayground.setPixelColor(0,   0, 255,   0);
      CircuitPlayground.setPixelColor(1,   0, 255,   0);
      CircuitPlayground.setPixelColor(2,   0, 255,   0);
      CircuitPlayground.setPixelColor(3,   0, 255,   0);
      CircuitPlayground.setPixelColor(4,   0, 255,   0);
      CircuitPlayground.setPixelColor(5,   0, 255,   0);
      CircuitPlayground.setPixelColor(6,   0, 255,   0);
      CircuitPlayground.setPixelColor(7,   0, 255,   0);
      CircuitPlayground.setPixelColor(8,   0, 255,   0);
      CircuitPlayground.setPixelColor(9,   0, 255,   0);
      score++;
      delay(holding);
      break;
      }
      delay(timer);
    }

  Serial.println("-----------");
  Serial.println(score);
  Serial.println(count);
  Serial.println("-----------");

  }

  if (count == 0) {
  CircuitPlayground.speaker.say(spGAMES);
  CircuitPlayground.speaker.say(spOVER);
  delay(1000);
  CircuitPlayground.speaker.say(spGOODBYE);
  CircuitPlayground.speaker.end();
  count = 2;
  }

  }
}

void passTone() {
  CircuitPlayground.playTone(440, 60);
  CircuitPlayground.playTone(466, 60);
  CircuitPlayground.playTone(494, 60);
  CircuitPlayground.playTone(523, 60);
}
